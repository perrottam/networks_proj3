#!/usr/bin/env python3

import argparse
import socket
import time
import json
import select
import string
import struct
import math
import copy

#DEBUG = True
DEBUG = False

parser = argparse.ArgumentParser(description='route packets')
parser.add_argument('asn', type=int, help="AS Number")
parser.add_argument('networks', metavar='networks',
                    type=str, nargs='+', help="networks")
args = parser.parse_args()

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################

class Router:

    routes = None
    updates = None
    relations = None
    sockets = None

    def __init__(self, networks):
        self.routes = []
        self.updates = []
        self.relations = {}
        self.sockets = {}
        for relationship in networks:
            network, relation = relationship.split("-")
            if DEBUG:
                print("Starting socket for", network, relation)
            self.sockets[network] = socket.socket(
                socket.AF_UNIX, socket.SOCK_SEQPACKET)
            self.sockets[network].setblocking(0)
            self.sockets[network].connect(network)
            self.relations[network] = relation
        return

    def best_socket_dest(self, daddr):
        """ Find best socket to send packet thru given the destination addr """
        s = None

        # find best match socket based on longest prefixs 
        longest_match = -1
        for sock in self.sockets:
            print("MATCHING " + daddr + " to " + sock)
            for i in range(min(len(daddr), len(sock))):
                cur_match = 0
                if (sock[i] == daddr[i]):
                    cur_match = cur_match + 1
                else:
                    if cur_match > longest_match:
                        longest_match = cur_match
                        s = sock # best socket seen thus far
                    break

        print("BEST SOCKET FOUND IS : " + str(s))
        return s

    def lookup_routes(self, daddr):
        """ Lookup all valid routes for an address """
        outroutes = []
        
        # convert daddr to binary
        daddrbin = ''.join(bin(int(x))[2:].zfill(8) for x in daddr.split('.'))

        longest = -1 # for longest prefix match
        for route in self.routes:
            # convert network to binary and netmask to cidr notation
            routebin = ''.join(bin(int(x))[2:].zfill(8) for x in route[NTWK].split('.'))
            binary_ip = ''.join(bin(int(x))[2:].zfill(8) for x in route[NMSK].split('.'))
            cidr = binary_ip.split('0')[0].count('1')
            
            if (daddrbin[0:cidr] == routebin[0:cidr]):
                # if the netmask of the new route is longer than previously found routes, only match the new route
                if (cidr > longest):
                    longest = cidr
                    outroutes = [route]
                # else add the new route to outroutes, more than one match
                elif (cidr == longest):
                    outroutes.append(route)
        return outroutes

    def get_shortest_as_path(self, routes):
        """ select the route with the shortest AS Path """
        outroutes = []
        shortest = -1
        for route in routes:
            cur = len(route[APTH])
            if shortest == -1 or cur == shortest:
                shortest = cur
                outroutes.append(route)
            elif cur < shortest:
                shortest = cur
                outroutes = []
                outroutes.append(route)
        if DEBUG:
            print("Minimized potential routes to shortest paths:")
            print(outroutes)
        return outroutes

    def get_highest_preference(self, routes):
        """ select the route with the highest preference """
        outroutes = []
        highest = -1
        for route in routes:
            cur = route[LPRF]
            if highest == -1 or cur == highest:
                highest = cur
                outroutes.append(route)
            elif cur > highest:
                highest = cur
                outroutes = []
                outroutes.append(route)
        if DEBUG:
            print("Minimized potential routes to highest preference:")
            print(outroutes)
        return outroutes

    def get_self_origin(self, routes):
        """ select self originating routes """
        outroutes = []
        for route in routes:
            if route[SORG]:
                outroutes.append(route)
        if not outroutes:
            outroutes = routes
        if DEBUG:
            print("Minimized potential routes to self originating (if any):")
            print(outroutes)
        return outroutes

    def get_origin_routes(self, routes):
        """ select origin routes: EGP > IGP > UNK """
        egp_routes = []
        igp_routes = []
        unk_routes = []

        for route in routes:
            if route[ORIG] == "EGP":
                egp_routes.append(route)
            elif route[ORIG] == "IGP":
                igp_routes.append(route)
            elif route[ORIG] == "UNK":
                unk_routes.append(route)

        outroutes = []
        if len(igp_routes) != 0:
            outroutes = igp_routes
        elif len(egp_routes) != 0:
            outroutes = egp_routes
        else:
            outroutes = unk_routes

        if DEBUG:
            print("Minimized potential routes by origin:")
            print(outroutes)

        return outroutes

    def filter_relationships(self, srcif, routes):
        """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
        outroutes = []
        if DEBUG:
            print('Relations: ' + str(self.relations))
        for r in routes:
            if self.relations[srcif] == CUST or self.relations[r[PEER]] == CUST:
                outroutes.append(r)
        return outroutes

    def lowest_ip_address_routes(self, routes):
        """ Selec the route with the lowest IP address """
        outroutes = []
        lowest = ""
        for route in routes:
            l = lowest.split('.')[0]
            p = route[PEER].split('.')[0]
            if not lowest or l > p:
                lowest = route[PEER]
                outroutes = []
                outroutes.append(route)
            elif l == p:
                outroutes.append(route)

        if DEBUG:
            print("Minimized potential routes by lowest ip:")
            print(outroutes)
        return outroutes

    def get_route(self, srcif, daddr):
        """	Select the best route for a given address	"""
        peer = None
        routes = self.lookup_routes(daddr)
        # Rules go here
        if routes:
            # 1. Highest Preference
            routes = self.get_highest_preference(routes)
            # 2. Self Origin
            routes = self.get_self_origin(routes)
            # 3. Shortest ASPath
            routes = self.get_shortest_as_path(routes)
            # 4. EGP > IGP > UNK
            routes = self.get_origin_routes(routes)
            # 5. Lowest IP Address
            routes = self.lowest_ip_address_routes(routes)
            # Final check: enforce peering relationships
            routes = self.filter_relationships(srcif, routes)
        if len(routes) >= 1:
            peer = routes[0][PEER]
        return self.sockets[peer] if peer else None

    def forward(self, srcif, packet):
        """ Forward a data packet   """
        # find the route
        route = self.get_route(srcif, packet[DEST])
        if route: 
            # if the route exists, forward the packet
            serialized = json.dumps(packet)
            route.sendall(serialized.encode(
                encoding='ascii', errors='strict'))
        else:
            # if the route does not exist, send a NO ROUTE message to the sender
            self.no_route_send_back(packet)
        return True

    def no_route_send_back(self, packet):
        to_send = {
            "src": packet[DEST], #switch back??
            "dst": packet[SRCE],
            "type": "no route",
            "msg": {},
        }

        serialized = json.dumps(to_send)
        print("PRINTING ROUTING TABLE------>")
        for r in self.routes:
            print(str(r))
        print(" ")    
        
        print("PACKET = " + str(packet)) 
        print('finding best socket for destination ' + packet[SRCE])
        sock = self.best_socket_dest(packet[SRCE])
        self.sockets[sock].sendall(serialized.encode(
            encoding='ascii', errors='strict')) 

    def coalesce(self):
        """	coalesce any routes that are right next to each other	"""
        # TODO (this is the most difficult task, save until last)
        return False   

    def pervade_update(self, srcif, packet):
        """ handle spreading update """
        other_neighbors = list(filter(lambda x: x != srcif, self.sockets))
        to_send = copy.deepcopy(packet)
        if packet[TYPE] == UPDT:
            to_send[MESG][APTH].append(args.asn)
        for sock in other_neighbors:
            if self.relations[srcif] == CUST or self.relations[sock] == CUST:
                #print('Sending from ' + srcif + ', ' + self.relations[srcif] + ' -> ' + sock + ', ' + self.relations[sock])
                #print('-----------------------')
                to_send[SRCE] = sock[:-1] + "1"
                to_send[DEST] = sock
                if DEBUG:
                    print("Sending update:\n", to_send)
                serialized = json.dumps(to_send)
                self.sockets[sock].sendall(serialized.encode(encoding='ascii', errors='strict'))

    def update(self, srcif, packet):
        """	handle update packets	"""
        # (1) Save a copy of the announcement
        self.updates.append(packet)
        # (2) Add an entry to the forwarding table
        msg = copy.deepcopy(packet)[MESG]
        msg.update({"peer": packet[SRCE]})
        self.routes.append(msg)
        # (3) Forward update message to neighbors
        self.pervade_update(srcif, packet)
        return True

    def revoke(self, srcif, packet):
        """ handle revoke packets   """
        # Save copy of revoke announcement for later
        self.updates.append(packet)
        # Remove dead entries from revoke in routing table
        newRoutes = []
        for r in packet[MESG]:
            for route in self.routes:
                if (route["network"] != r["network"] or route["netmask"] != r["netmask"] or route["peer"] != packet[SRCE]):
                    newRoutes.append(route)
        
        self.routes = copy.deepcopy(newRoutes)
        #self.coalesce() for disaggregation
        self.pervade_update(srcif, packet)
        return True   


    def dump(self, packet):
        """	handles dump table requests	"""
        msg = []
        for route in self.routes:
            msg.append({
                "network": route["network"],
                "netmask": route["netmask"],
                "peer": route[PEER]
            })
        to_send = {
            "src": packet[DEST],
            "dst": packet[SRCE],
            "type": "table",
            "msg": msg,
        }
        if DEBUG:
            print("Sending dump:\n", to_send)
        serialized = json.dumps(to_send)
        self.sockets[packet[SRCE]].sendall(serialized.encode(
            encoding='ascii', errors='strict'))
        return True

    def handle_packet(self, srcif, packet):
        """	dispatches a packet """
        # TODO
        packet_type = packet[TYPE]
        if (packet_type == UPDT):
            return self.update(srcif, packet)
        elif (packet_type == DATA):
            return self.forward(srcif, packet)
        elif (packet_type == DUMP):
            return self.dump(packet)
        elif (packet_type == RVKE):
            return self.revoke(srcif, packet)
        else:
            raise ValueError("Invalid packet type")

    def send_error(self, conn, msg):
        """ Send a no_route error message """
        # TODO
        print("ERROR: most likely could not send packet since route does not exist in table")
        return

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                try:
                    k = conn.recv(65535)
                except:
                    # either died on a connection reset, or was SIGTERM's by parent
                    return
                if k:
                    for sock in self.sockets:
                        if self.sockets[sock] == conn:
                            srcif = sock
                    msg = json.loads(k)
                    if DEBUG:
                        print("Received message:\n", msg)
                    if not self.handle_packet(srcif, msg):
                        self.send_error(conn, msg)
                else:
                    return
        return


if __name__ == "__main__":
    router = Router(args.networks)
    router.run()
